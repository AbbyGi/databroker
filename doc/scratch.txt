Overview
--------


* A **Signal** represents a single value.  In EPICS, it corresponds to either
  a single read-only PV or a pair of read and write PVs, grouped together.  It
  assigns a human-readable name (e.g., 'temperature') which is more natural in
  the analysis phase than the raw PV names.
* A **Device** is composed of Signals or of other Devices.  Devices can be
  nested.  Some devices map to single pieces of hardware (like a motor).
  Others group together many different pieces of hardware (like a
  diffractometer).  In one process, the same PVs might appear in multiple
  different Devices, so organized for different uses.

Signals and devices have:

* a ``connected`` attribute, to quickly check whether *all* the involved PVs
  are responding
* a ``name`` attribute, assigning a human-friendly alias (e.g., "temperature")
  which is often more natural than the raw PV name in the analysis phase
* a means of designating signals that should included in a typical reading
  (``read_attrs`` for "read attriubtes"), signals that change rarely
  (``configuration_attrs`` for "configuration attributes") and should be read
  only when known to change, and signals that should be not read at all (a
  common example: the hundreds of rarely-touched PVs in the area detector
  plugin).
* a single ``read`` method which reads the values of all a device's designated
  components and collates them into a single, labeled result
* a single ``describe`` method which extrats the metadata (PV, units,
  precision, data type, etc.) of all a device's designated components


Signals and Devices
===================


This is the class inheritance diagram for the key pieces of ophyd. This is
a selection meant to give a readable and representative picture of the
package's organization.

.. inheritance-diagram:: ophyd.Device ophyd.Component ophyd.EpicsSignal ophyd.EpicsSignalRO ophyd.Signal ophyd.EpicsMotor ophyd.EpicsScaler ophyd.EpicsMCA ophyd.AreaDetector ophyd.HDF5Plugin ophyd.DynamicDeviceComponent ophyd.PVPositioner ophyd.SingleTrigger
    :parts: 2

Device classes use metaclass magic to inspect and lazily instantiate their
Components. The examples illustrate how easy it is to define new kinds of
devices, and this is largely because the "dirty work" of handling connections
is hidden in the ``Component`` and ``ComponentMeta``. To understand further,
read the source code of ``device.py`` or contact the developers.
